---
title: "Analyse med R for Brev"
date: last-modified
date-format: "[Sist oppdatert] D.M.YY."
toc: true
toc-title: Innhold
number-sections: false
execute:
    enables: true
    echo: false     # Vise kode eller ikke
    warning: false  # Ikke vise "warnings" fra kodebloker
format: 
    html:
        embed-resources: true
        #code-background: true
        #code-block-border-left: true
        #code-fold: False         # Kode gjemt i en widget for hver kodeblokk
        #code-tools: true        # Noen kodealternativer
    #pdf: default
    #docx: default

jupyter: python3
crossref:
    fig-title: Figur     # (default is "Figure")
    tbl-title: Tabell     # (default is "Table")
    #title-delim: —     # (default is ":")

    #Hvordan skal refereringen se ut i kompilert quarto:
    fig-prefix: figur   # (default is "Figure")
    tbl-prefix: tabell    # (default is "Table")
    #ref-hyperlink: false # (default is true)
#df-print: kable
---




<-- I denne qmd-filen er det enkel kode for å finne polykorisk korrelasjon mellom items, og kode for 
 å gjennomføre cfa med pakken lavaan. Den er skrevet som et quarto-dokument for å forenkle arbeidsflyten i utforskning. Når analysen er endelig bør en skrives til et eget R-skript som kalles til en datastory som presenterer.
 -->

```{r}
renv::restore()
```

```{r}
require("lavaan")
require("psych")
require("readxl")
require("tidyr")
require("dplyr")
require("corrplot")
require("tidyverse")
require("styler")
require("HH")
```


# last inn data:
```{r}
df_inn <- as.data.frame(read_csv("../data/new/survey.csv"))
df_inn %>% head()


#wrangle
df_ <- df_inn[,c(1,  #personID
                6, #Alle  #Tenk på det siste brevet du fikk fra oss om AAP. Hva handlet brevet om?
                7, #Alle  #Har du lest brevet?
                9, #Alle  # Det var tydelig for meg hva dette brevet handlet om
                10,#Alle # Det var lett å finne den informasjonen som var viktig for meg
                11,#Alle # Jeg forstod hva brevet handlet om etter å ha lest overskriften
                12,#Alle # Brevet er skrevet slik jeg selv snakker
                13, # Jeg forstår hva jeg må gjøre for å få utbetalt AAP etter å ha lest brevet
                14, # Jeg forstår hvor lenge jeg mottar AAP etter å ha lest brevet
                15, # Det var lett å forstå hvorfor jeg fikk avslag på AAP etter å ha lest brevet
                16, # Det var lett å få oversikt over hvilken informasjon NAV har brukt for å avslå søknaden
                17, # Det var tydelig i brevet hvem som skulle sende opplysningene NAV ba om
                18, # Det var tydelig hvilke opplysninger NAV ba om
                19,#Alle # Jeg måtte lese brevet flere ganger for å forstå innholdet
                20,#Alle # Tok du kontakt med NAV for å få hjelp til å forstå brevet?
                21,#Alle # Cirka hvor lang tid tok det å forstå brevet?
                29 # device
                )]
questions = cbind(c("felles", "id"), rbind(
            c("felles", "felles", "felles", "felles","felles", "felles", "utbetaling", "utbetaling", "avslag", "avslag",  "opplysninger", "opplysninger", "felles", "felles", "felles", "felles"), 
            df_[1,c(-1, -17)]), 
            c("felles", "device"))
names(questions) = c("id", "Pre_Q1", "Pre_Q2", paste("Likert_Q", seq(1:10), sep = ""),paste("Post_Q", seq(1:3), sep = ""), "device")
names(df_) <- names(questions)

df <- df_[-1,]


```

```{r}



## Mer wrangling
# Rekode svarkategorier som factor:
df_mod = df
# Dette bør kunne skrives om med apply()-funksjoner
df_mod <- df_mod %>%  mutate(Likert_Q1 = recode(Likert_Q1, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q2 = recode(Likert_Q2, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q3 = recode(Likert_Q3, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q4 = recode(Likert_Q4, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q5 = recode(Likert_Q5, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q6 = recode(Likert_Q6, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q7 = recode(Likert_Q7, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q8 = recode(Likert_Q8, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q9 = recode(Likert_Q9, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))
df_mod <- df_mod %>%  mutate(Likert_Q10 = recode(Likert_Q10, "Helt uenig" = 1, "Uenig" = 2, "Verken eller" = 3, "Enig" = 4, "Helt enig" = 5))



df_mod[1,4] %>% is.numeric()
er_likert <- sapply(df_mod[1,], is.numeric)
er_likert[1] <- F


# Sette likert skala til ordered
df[er_likert] <- as.data.frame(
                   lapply(df[er_likert], function(x) factor(x, 
                                                            levels = c("Helt uenig", 
                                                                       "Uenig", 
                                                                       "Verken eller", 
                                                                       "Enig", 
                                                                       "Helt enig"),
                                                            ordered = TRUE
                                                            )
                        ))
```

# Sjekk svar på hvert likert spørmål.
## Aggregert alle brevkategorier

```{r}

df_mod[, ((questions[1,] == "felles") & er_likert)]

# Enkelt plotting av likert skala



df_komplette_felles <- df[complete.cases(df[, ((questions[1,] == "felles") & er_likert)]),] 

til_tabell <- function(col, tab0) {
  tabell= as.data.frame(t(as.data.frame(table(col))))
  names(tabell) <- tabell[1,]
  tabell <- tabell[-1,]
  
  tabell
}
tab <- til_tabell(df_komplette_felles[, c(4)], NULL)

for (col in df_komplette_felles[, c(5:7)]){
  tab_var <- til_tabell(col)
  tab <- rbind(tab, tab_var)
}
tab$q_nr = names(df_komplette_felles[, c(4:7)])
row.names(tab) = NULL
#tab$q = questions[2, names(df_komplette_felles[, c(4:7)])]




```

```{r}
dd <- df_mod[er_likert] %>% psych::describe()
dd[, c("n", "mean", "sd", "median", "min", "max", "skew", "kurtosis")]
```

```{r}
# calculate the mean & SD and save them as objects so they can be called upon
# when creating our vertical lines


mean.weight <- with(df_mod, mean(Likert_Q4, na.rm = T))
sd.weight <- with(df_mod, sd(Likert_Q4, na.rm = T))

# plot our histogram
with(df_mod[er_likert], hist(Likert_Q4,xlim = c(0,6),ylim = c(0,750), xaxs= "i", yaxs="i"))
# add vertical lines for the mean and 1 sd above and below the mean
abline(v= mean.weight, lty=1, lwd=3,col="blue")
abline(v= mean.weight - (sd.weight), lty=2, lwd=1, col="red")
abline(v= mean.weight + (sd.weight), lty=2, lwd=1, col="red") 
# add our legend
legend("topright",             # specify location
       legend=c("Mean", "Mean +/- SD"), # specify contents of legend
       col=c("blue","red"),    # specify colours in order of legend contents
       lwd=c(3,1),             # specify line widths in order
       lty=c(1,2))             # specify line types in order
```



# Sjekk missing


```{r}
library(visdat)


vis_miss(df_mod[, ((questions[1,] == "felles") & er_likert)])
df_mod[, ((questions[1,] == "felles") & er_likert)]
```

```{r}


```

# polykorisk 

```{r}
df_komplette_num <- df_mod[complete.cases(df_mod[, ((questions[1,] == "felles") & er_likert)]),] 

M <- cor(df_komplette_num[,c(4:7)]) # Pearson correlation

corrplot::corrplot.mixed(M, order = "AOE")

M_pol <- psych::polychoric(df_komplette_num[,c(4:7)]) # polychoric correlation

corrplot.mixed(M_pol$rho)
```

# Parallell analysis

```{r}
fa.parallel(df_komplette_num[,c(4:7)] , error.bars = T, se.bars = T)
```



# CFA med lavaan

```{r}
model_1 <- "
## LatentVariabel =~ item1 + item2 + ...
BrevOpp =~ Likert_Q1 + #Det var tydelig for meg hva dette brevet handlet om
           Likert_Q2 + #Det var lett å finne den informasjonen som var viktig for meg
           Likert_Q3 + #Jeg forstod hva brevet handlet om etter å ha lest overskriften
           Likert_Q4 + #Brevet er skrevet slik jeg selv snakker
"

fit <- lavaan::cfa(
  data = df_komplette_num,
  model = model_1,
  # estimator = "MLR", #Tilnærme 5 pkt likert til kontinuerlig skala
   estimator = "ULSMV", ordered = TRUE #Anta ordnial skala
  #estimator = "WLSMV", ordered = TRUE # Anta ordnial skala, alternativ estiamtor
)


summary(fit, fit.measures = TRUE, standardized = TRUE)
```
Fra output:
``` 
Robust Comparative Fit Index (CFI)                         0.994
Robust Tucker-Lewis Index (TLI)                            0.981
```

Dette kjører meget bra. Det er en underliggende faktor alle brevkategorier. Gjenstår å se på multiple groups, med brevkategori som variabel for gruppetilhørighet. 


#logistic regression with probit-link


```{r include = FALSE}
#[Sjekk ut hvis det er nyttig.]
model_1 <- "
## LatentVariabel =~ item1 + item2 + ...
BrevOpp =~ Likert_Q1 + #Det var tydelig for meg hva dette brevet handlet om
           Likert_Q2 + #Det var lett å finne den informasjonen som var viktig for meg
           Likert_Q3 + #Jeg forstod hva brevet handlet om etter å ha lest overskriften
           Likert_Q4 + #Brevet er skrevet slik jeg selv snakker
Post_Q2 ~ 1+ BrevOpp   #Tok du kontakt med NAV for å få hjelp til å forstå brevet?"

fit <- sem(model_1, data=df_komplette_num[,c(4:7)], ordered=TRUE)
summary(fit, fit.measures = TRUE, standardized = TRUE)


```

